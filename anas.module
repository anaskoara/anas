<?php

/**
 * @file
 * Integrates Drupal Commerce with CiviCRM.
 * Based largely on uc_civicrm, so thanks to dharmatech and AJA for their work
 * there.
 */

/**
 * Implements hook_help().
 */
 
 
 
 function anas_help($path = 'admin/help#anas') {
  switch ($path) {
    case 'admin/help#anas':
      return t('This module integrates Drupal Commerce with CiviCRM.');
  }
}
function anas_form_alter(&$form, &$form_state, $form_id) {
  // Check when the right form is passed.
  
  if ($form_id == 'field_ui_field_overview_form') {
	$form['fields']['anas_membership_type_id']['delete'] =array();
	
  }
}
function anas_field_widget_form_alter(&$element, &$form_state, $context){
		if($form_state['build_info']['form_id'] == 'commerce_product_ui_product_form'&&$element['#field_name']=="anas_membership_type_id"){
			civicrm_initialize();
			 $result = civicrm_api3('MembershipType', 'getlist');
			 $values=array();
			 foreach($result['values'] as $value){
				 $values[$value['id']]=$value['label'];
			 }
			$element['#options']+=$values;
			if(isset($element['#entity']->anas_membership_type_id)){					
				$element['#default_value']=$element['#entity']->anas_membership_type_id['und']['0']['value'];
			}
			$element['#description']=t('Membership type assigened to user when buying this product');
			
		}
		
}


function anas_commerce_checkout_complete($order){
	$date=date("Y-m-d",$order->created);
	civicrm_initialize();
	$contactID=CRM_Core_Session::singleton()->getLoggedInContactID();
	foreach (entity_metadata_wrapper('commerce_order', $order)->commerce_line_items as $delta => $line_item_wrapper) {
		if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
			$product_ids[] = $line_item_wrapper->commerce_product->raw();
		}
	}
	$membership_ids=array();
	foreach($product_ids as $product_id){
	   $product=commerce_product_load($product_id) ;
	   if(isset($product->anas_membership_type_id ['und'][0]['value'])){
			$membership_type_id=$product->anas_membership_type_id ['und'][0]['value'];
			  $params = array(
					'contact_id' => $contactID,
					'membership_type_id' => $membership_type_id,
					'join_date' => $date,
					'start_date' => $date,
					'source' => 'Product Payment',
				//	'is_override' => 1,
				  );
				
				$result = civicrm_api3('Membership', 'create', $params);
	   }
	}
}

//implement hook_commerce_product_type_insert
function anas_commerce_product_type_insert($product_type, $skip_reset){
	$field = field_read_field('anas_membership_type_id');
	if (!empty($field)) {
		$instance = array(
			'field_name' => 'anas_membership_type_id',
			'entity_type' => 'commerce_product',
			'bundle' => $product_type['name'],
			'label' => t('CiviCRM Membership Type'),
			'description' => t('Membership type given to user when buy product.')
		);	
		field_create_instance($instance);
	}  
}


/**
* Implements hook_field_formatter_info().
*/
function anas_field_formatter_info() {
		return array(
			'anas_formatter' => array( //Machine name of the formatter
			'label' => t('Membership Type'),
			'field types' => array('number_integer'), //because we sored membership type id
			'settings' => array( //Array of the settings we'll create
										'anas_membership_type_id' => '', //give a default value for when the form is first loaded
										'tooltip' => 'Membership type given when buy this product', //ditto
										),
			),
	);
}

/**
* Implements hook_field_formatter_settings_form().
*/
function anas_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
	//This gets the view_mode where our settings are stored
	$display = $instance['display'][$view_mode];
	//This gets the actual settings
	$settings = $display['settings'];
	//Initialize the element variable
	$element = array();
	//Add your select box
	$element['anas_membership_type_id'] = array(
		'#type' => 'select', // Use a select box widget
		'#title' => t('Button Size'), // Widget label
		'#description' => t('Select what size of FB button'), // Helper text
		'#default_value' => $settings['pic_size'], // Get the value if it's already been set
		'#options' => array(
			'small' => 'Small',
			'medium' => 'Medium',
			'large' => 'Large',
		),
	);
	$element['tooltip'] = array(
		'#type' => 'textfield', // Use a textbox
		'#title' => t('Tool Tip'), // Widget label
		'#description' => t('This text will appear when a user mouses over.'), // helper text
		'#default_value' => $settings['tooltip'], // Get the value if it's already been set
	);
	return $element;
}

/**
* Implements hook_field_formatter_settings_summary().
*/
function anas_field_formatter_settings_summary($field, $instance, $view_mode) {
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];
	$summary = t('Use a @size Facebook button with the tooltip of "@tooltip"', array(
	'@size' => $settings['pic_size'],
	'@tooltip' => $settings['tooltip'],
	)); // we use t() for translation and placeholders to guard against attacks
	return $summary;
}

/**
* Implements hook_field_formatter_view().
*/
function anas_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array(); // Initialize the var
	$settings = $display['settings']; // get the settings
	$size = $settings['pic_size']; // The Size setting selected in the settings form
	$tooltip = $settings['tooltip']; // The tool tip assigned in settings
	// Create the image - Note that I'm storing the images in our module but they could be anywhere
	$image = '';
	foreach ($items as $delta => $item) {
		$fb = $item['safe_value']; // Getting the actual value
	}
	$options = array(
		'html' => TRUE, // This tells Drupal that we're sending HTML, not plain text, otherwise it would encode it
		'attributes' => array(
			'title' => $tooltip, // This sets our tooltip
		),
	);
	if(isset($fb)) {
		$link = l($image, $fb, $options); // Create the Link
		$element[0]['#markup'] = $link; // Assign it to the #markup of the element
	}
	return $element;
}